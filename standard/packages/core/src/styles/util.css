
// Flexbox Utils
// -------------------------------------------------------------------------------------------------

.fc-flex-row {
  display: flex;
  flex-direction: row;
}

.fc-flex-column {
  display: flex;
  flex-direction: column;
}

.fc-grow {
  flex-grow: 1;
}

/*
Only important if there are siblings that are expanding too.
Rarely used. Just inline this?
*/
.fc-basis0 {
  flex-basis: 0;
}

.fc-liquid {
  flex-grow: 1;
  flex-basis: 0;
  min-width: 0;
  min-height: 0;
}

// Table Utils
// -------------------------------------------------------------------------------------------------

.fc-row {
  display: flex;
  flex-direction: row;
}

/*
like an fc-row, but DOES NOT FORCE CHILDREN TO BE CELLS
*/
.fc-rowgroup {
  display: flex;
  flex-direction: column;
}

.fc-row,
.fc-rowgroup,
.fc-rowdivider {
  border-style: solid;
  border-color: var(--fc-border-color);
  border-width: 1px 0 0; // top
}

// kill top border
// (first-child)
.fc-row:first-child:not(.fc-not-first),
.fc-rowgroup:first-child,
.fc-rowdivider:first-child,
// (when below a header/divider)
.fc-sticky-header + .fc-row, // TODO: move to fc-rowgroup-sticky?
.fc-sticky-header + .fc-rowgroup,
.fc-rowdivider + .fc-row,
.fc-rowdivider + .fc-rowgroup { // TODO: combine this with above
  border-top-width: 0;
}

.fc-cell,
.fc-celldivider {
  border: 0 solid var(--fc-border-color);
}

.fc-cell {
  margin: 0 !important;
  padding: 0 !important;
}

.fc-cell-inner {
  flex-shrink: 0; // so that cell (whose height is controlled the row) does not compress
  white-space: nowrap;
  overflow: hidden;
}

.fc-direction-ltr {
  & .fc-cell,
  & .fc-celldivider {
    border-left-width: 1px;
  }

  // kill left border
  // (first-child)
  & .fc-cell:first-child:not(.fc-not-first),
  // (when right of a divider)
  & .fc-celldivider + .fc-cell {
    border-left-width: 0;
  }

  // takeover right border
  & .fc-celldivider {
    border-right-width: 1px;
  }
}

.fc-direction-rtl {
  & .fc-cell,
  & .fc-celldivider {
    border-right-width: 1px;
  }

  // kill right border
  // (first-child)
  & .fc-cell:first-child:not(.fc-not-first),
  // (when left of a divider)
  & .fc-celldivider + .fc-cell {
    border-right-width: 0;
  }

  // takeover left border
  & .fc-celldivider {
    border-left-width: 1px;
  }
}

/*
Lone cell in a row should always fill row. Makes axis widths much easier
*/
.fc-cell:only-child {
  flex-grow: 1;
  flex-basis: 0;
  min-width: 0;
}

.fc-rowdivider,
.fc-celldivider {
  background: var(--fc-neutral-bg-color);
}

.fc-celldivider {
  padding-left: 2px;
}
.fc-rowdivider {
  padding-bottom: 2px; // can use just height if we move towards content-box!
}

// takeover bottom border
.fc-rowdivider,
.fc-sticky-header {
  border-bottom-width: 1px; // takeover the bottom border
}

// Misc Utils
// -------------------------------------------------------------------------------------------------

.fc-rel {
  position: relative;
}

.fc-abs {
  position: absolute;
}

.fc-fill {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

.fc-fill-x {
  position: absolute;
  left: 0;
  right: 0;
}

.fc-fill-y {
  position: absolute;
  top: 0;
  bottom: 0;
}

.fc-sticky-y {
  position: sticky;
  top: 0;
  bottom: 0;
}

.fc-sticky-x {
  position: sticky;
  left: 0;
  right: 0;
}

.fc-sticky-header {
  position: sticky;
  top: 0;
  background: var(--fc-page-bg-color);
  z-index: 9999; // TODO: what was it before?
}

.fc-sticky-footer {
  position: sticky;
  bottom: 0;
  z-index: 9999; // TODO: what was it before?
}

/*
Only needed when padding/border must be separate from width/height
*/
.fc-content-box {
  box-sizing: content-box;
}

.fc-border {
  border: 1px solid var(--fc-border-color);
}

.fc-offscreen {
  position: absolute;
  left: -10000px;
}

.fc-shaded {
  background-color: var(--fc-neutral-bg-color);
}

.fc-padding-sm {
  padding: 2px 4px;
}
.fc-padding-md {
  padding: 4px 5px;
}
.fc-padding-lg {
  padding: 8px;
}

.fc-justify-center {
  justify-content: center;
}

.fc-align-center {
  align-items: center;
}

.fc-align-start {
  align-items: flex-start;
}
