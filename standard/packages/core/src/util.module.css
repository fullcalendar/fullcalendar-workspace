
:root {
  --fc-sticky-header-footer-z: 3;
  --fc-popover-z: 4;
}

.colorSchemeLight {
  color-scheme: light !important;
}

.colorSchemeDark {
  color-scheme: dark !important;
}

.popoverZ {
  z-index: var(--fc-popover-z) !important;
}

.borderBoxRoot,
.borderBoxRoot *,
.borderBoxRoot *:before,
.borderBoxRoot *:after {
  box-sizing: border-box !important;
}

.ltrRoot {
  direction: ltr !important;
  text-align: left !important;
}

.rtlRoot {
  direction: rtl !important;
  text-align: right !important;
}

/* classes attached to <body> */
.notAllowed,
.notAllowed * {
  cursor: not-allowed !important;
}

.noScrollbars {
  -ms-overflow-style: none !important; /* IE and Edge */
  scrollbar-width: none !important; /* Firefox */
}

/* Hide scrollbar for Chrome, Safari and Opera */
.noScrollbars::-webkit-scrollbar {
  display: none !important;
}

.noShrink {
  flex-shrink: 0 !important;
}

.calendarScreenRoot .safeTiles {
  display: flex !important;
  flex-direction: row !important;
  flex-wrap: wrap !important;
}

/* HACK for Safari. Can't do break-inside:avoid with flexbox items, likely b/c it's not standard:
   https://stackoverflow.com/a/60256345 */
.calendarPrintRoot.ltrRoot .safeTiles > * {
  float: left !important;
}

.calendarPrintRoot.rtlRoot .safeTiles > * {
  float: right !important;
}

.calendarPrintRoot .safeTiles::after {
  content: "" !important;
  display: block !important;
  clear: both !important;
}

/* TODO: maybe have theme define this. might want grippy texture or hover effect */
.colResizer {
  position: absolute !important;
  z-index: 1 !important;
  top: 0 !important;
  bottom: 0 !important;
  width: 5px !important;
  cursor: col-resize !important;
}

.ltrRoot .colResizer {
  right: -3px !important;
}

.rtlRoot .colResizer {
  left: -3px !important;
}

.cursorPointer {
  cursor: pointer !important;
}

.cursorResizeT {
  cursor: n-resize !important;
}

.cursorResizeB {
  cursor: s-resize !important;
}

.ltrRoot .cursorResizeS,
.rtlRoot .cursorResizeE {
  cursor: w-resize !important;
}

.ltrRoot .cursorResizeE,
.rtlRoot .cursorResizeS {
  cursor: e-resize !important;
}

.hit,
.hitX,
.hitY {
  position: absolute !important;
  box-sizing: content-box !important;
  width: 100% !important;
  height: 100% !important;
}

.hit {
  padding: 10px !important;
  margin: -10px !important;
}

.hitX {
  padding-left: 10px !important;
  padding-right: 10px !important;
  margin-left: -10px !important;
  margin-right: -10px !important;
}

.hitY {
  padding-top: 10px !important;
  padding-bottom: 10px !important;
  margin-top: -10px !important;
  margin-bottom: -10px !important;
}

/* QUESTION: why not use -left -right instead of negative margins/padding for ALL? */
.hitXSkinny {
  position: absolute;
  top: 0;
  bottom: 0;
  left: -5px;
  right: -5px;
}

/* Border Utils */
/* ------------------------------------------------------------------------------------------------- */

/* TODO: break-out to x and y. don't have "only" all */
/* TODO: instead of "border" utils, call them "borderless" to subtract? */

.borderNone {
  border: 0 !important;
}

.borderOnlyT {
  border-left: 0 !important;
  border-right: 0 !important;
  border-bottom: 0 !important;
}

.borderOnlyB {
  border-top: 0 !important;
  border-left: 0 !important;
  border-right: 0 !important;
}

.borderOnlyS,
.borderOnlyE {
  border-top: 0 !important;
  border-bottom: 0 !important;
}

.ltrRoot .borderOnlyS {
  border-right: 0 !important;
}

.rtlRoot .borderOnlyS {
  border-left: 0 !important;
}

.ltrRoot .borderOnlyE {
  border-left: 0 !important;
}

.rtlRoot .borderOnlyE {
  border-right: 0 !important;
}

.borderlessX {
  border-left: 0 !important;
  border-right: 0 !important;
}

.borderlessY {
  border-top: 0 !important;
  border-bottom: 0 !important;
}

.borderlessTop {
  border-top: 0 !important;
}

.borderlessBottom {
  border-bottom: 0 !important;
}

/* for matching cell start-border, assumed to be 1px, which can't be guaranteed */
.ltrRoot .fakeBorderS {
  border-left: 1px solid transparent !important;
}

.rtlRoot .fakeBorderS {
  border-right: 1px solid transparent !important;
}

/* Flexbox Utils */
/* ------------------------------------------------------------------------------------------------- */

.flexRow {
  display: flex !important;
  flex-direction: row !important;
}

.flexCol {
  display: flex !important;
  flex-direction: column !important;
}

.flexWrap {
  flex-wrap: wrap;
}

.grow {
  flex-grow: 1 !important;
}

.liquid {
  flex-grow: 1 !important;
  flex-basis: 0 !important;
  min-width: 0 !important;
  min-height: 0 !important;
}

/*
TODO: use liquidX/Y elsewhere because frees up min other dimension; less collisions
*/
.liquidX {
  flex-grow: 1 !important;
  flex-basis: 0 !important;
  min-width: 0 !important;
}

/* Print-Safe Utils (media:screen ONLY) */
/* ------------------------------------------------------------------------------------------------- */

.calendarScreenRoot .printRoot,
.calendarScreenRoot .printHeader {
  display: flex !important;
  flex-direction: column !important;
}

/* Table Utils */
/* ------------------------------------------------------------------------------------------------- */

.tight {
  margin: 0 !important;
  padding: 0 !important;
}

.noPadding {
  padding: 0 !important;
}

.noMargin {
  margin: 0 !important;
}

.noMarginY {
  margin-top: 0 !important;
  margin-bottom: 0 !important;
}

.noMarginX {
  margin-left: 0 !important;
  margin-right: 0 !important;
}

.rigid {
  flex-shrink: 0 !important;
  white-space: nowrap !important;
}

/* Misc Utils */
/* ------------------------------------------------------------------------------------------------- */

.crop {
  overflow: hidden !important;
}

/*
TODO: eventually use this on daygrid/timegrid events' inner, time, and title, FOR PRINT
Needed to prevent wrapping to multiple lines, increasing height, throwing off print-positioning,
which can't rely on dynamic height detection after print-flag activated.
*/
.cropNowrap {
  white-space: nowrap !important;
  overflow: hidden !important;
}

.rel {
  position: relative !important;
}

.abs {
  position: absolute !important;
}

.ltrRoot .start0 {
  left: 0 !important;
}

.rtlRoot .start0 {
  right: 0 !important;
}

.fill {
  position: absolute !important;
  top: 0 !important;
  left: 0 !important;
  right: 0 !important;
  bottom: 0 !important;
}

.fillTop,
.fillX {
  position: absolute !important;
  left: 0 !important;
  right: 0 !important;
}

.fillY,
.fillStart {
  position: absolute !important;
  top: 0 !important;
  bottom: 0 !important;
}

.fillTop {
  top: 0 !important;
}

.fillStart {
  left: 0 !important;
  right: 0 !important;
  width: 0 !important;
}

.sticky {
  position: sticky !important;
}

.stickyT {
  position: sticky !important;
  top: 0 !important;
}

/* Sticks to either left or right (the flex "start") depending on ltr/rtl */
.stickyS {
  position: sticky !important;
  left: 0 !important;
  right: 0 !important;
}

.tableHeaderSticky {
  position: sticky !important;
  top: 0 !important;
  z-index: var(--fc-sticky-header-footer-z) !important;
}

/* Only needed when padding/border must be separate from width/height */
.contentBox {
  box-sizing: content-box !important;
}

.offscreen {
  position: absolute !important;
  left: -10000px !important;
}

.justifyBetween {
  justify-content: space-between !important;
}

.justifyEnd {
  justify-content: flex-end !important;
}

.alignCenter {
  align-items: center !important;
}

.alignStart {
  align-items: flex-start !important;
}

.alignEnd {
  align-items: flex-end !important;
}

/* Footer Scrollbar */
/* ------------------------------------------------------------------------------------------------- */

.footerScrollbarSticky {
  position: sticky !important;
  bottom: 0 !important;
  z-index: var(--fc-sticky-header-footer-z) !important;
}

.footerScrollbar > * {
  margin-top: -1px !important;
}

.footerScrollbar > * > * {
  height: 1px !important;
}

/* Print-Safe Utils */
/* ------------------------------------------------------------------------------------------------- */

.calendarPrintRoot .breakInsideAvoid {
  break-inside: avoid !important;
}

.calendarPrintRoot .printRoot {
  display: table !important;
  table-layout: fixed !important;
  width: 100% !important;
  border-spacing: 0 !important;
  border-collapse: collapse !important;
}

.calendarPrintRoot .printHeader {
  display: table-header-group !important;
  break-inside: avoid !important;
  background: #fff !important;
  z-index: 9999 !important;
  position: relative !important;
}

.printSiblingRow {
  /* min-height when multiple rows coexist, provides sane aspect-ratio for cells */
  min-height: 6em !important;
}

/* INTERNAL MARKER -- used to mark an element for internal significance */
/* ------------------------------------------------------------------------------------------------- */

.internalRoot {}

.internalTimelineSlot {}

.internalEvent {}
.internalEventMirror {}
.internalEventDraggable {}
.internalEventSelected {}
.internalEventResizable {}
.internalEventResizer {}
.internalEventResizerStart {}
.internalEventResizerEnd {}

.internalBgEvent {}

.internalMoreLink {}

.internalNavLink {}

.internalViewOuter {}

.internalPopover {}

.internalView {}
.internalViewOuter {}

.internalScroller {}
